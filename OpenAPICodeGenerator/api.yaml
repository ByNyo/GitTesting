openapi: 3.0.3
info:
  title: Bright Sky
  version: 2.1.9
  description: |

    Bright Sky is a free and open-source weather API. It aims to provide an easy-to-use gateway to weather data that the [DWD](https://www.dwd.de/) â€“ Germany's meteorological service â€“ publishes on their [open data server](https://opendata.dwd.de/).

    The public instance at `https://api.brightsky.dev/` is free-to-use for all purposes, **no API key required**! Please note that the [DWD's Terms of Use](https://www.dwd.de/EN/service/copyright/copyright_artikel.html) apply to all data you retrieve through the API.

    > This documentation is generated from an OpenAPI specification. The current version is available from https://brightsky.dev/brightsky.yml.


    ## Quickstart

    * Check out [`/current_weather`](operations/getCurrentWeather) if you want to know what the weather's like _right now_.
    * Check out [`/weather`](operations/getWeather) for hourly weather observations and forecasts.
    * Check out [`/radar`](operations/getRadar) if you're looking for a high-resolution rain radar.
    * Check out [`/alerts`](operations/getAlerts) if you're interested in weather alerts.

    ... or keep reading below for some background information.


    ## Good to Know

    * **Geographical coverage**: due to its nature as German meteorological service, the observations published by the DWD have a strong focus on Germany. The _forecasts_ cover the whole world, albeit at a much lower density outside of Germany.
    * **Historical coverage**: Bright Sky serves historical data going back to January 1st, 2010. If you need data that goes further back, check out our [infrastructure repository](https://github.com/jdemaeyer/brightsky-infrastructure) to easily set up your own instance of Bright Sky!
    * **Source IDs**: Bright Sky's _source IDs_ are a technical artifact and â€“ unlike the [DWD station IDs](https://www.dwd.de/DE/leistungen/klimadatendeutschland/stationsliste.html) and [WMO station IDs](https://opendata.dwd.de/climate_environment/CDC/help/stations_list_CLIMAT_data.txt) â€“ have no meaning in the real world. When making requests to Bright Sky, try to avoid them and supply lat/lon or station IDs instead.


    ## Useful Links

    * [Bright Sky source code and issue tracking](https://github.com/jdemaeyer/brightsky/)
    * [Bright Sky infrastructure configuration](https://github.com/jdemaeyer/brightsky-infrastructure/)
    * [DWD Open Data landing page](https://www.dwd.de/EN/ourservices/opendata/opendata.html)
    * [Additional explanation files for DWD Open Data](https://www.dwd.de/DE/leistungen/opendata/hilfe.html?nn=495490&lsbId=627548), including:
        * [List of main observation stations](https://www.dwd.de/DE/leistungen/opendata/help/stationen/ha_messnetz.xls?__blob=publicationFile&v=1)
        * [List of additional observation stations](https://www.dwd.de/DE/leistungen/opendata/help/stationen/na_messnetz.xlsx?__blob=publicationFile&v=10)
        * [List of MOSMIX stations](https://www.dwd.de/DE/leistungen/met_verfahren_mosmix/mosmix_stationskatalog.cfg?view=nasPublication&nn=495490)
        * [List of meteorological parameters](https://www.dwd.de/DE/leistungen/opendata/help/schluessel_datenformate/kml/mosmix_elemente_pdf.pdf?__blob=publicationFile&v=2)
    * [DWD Open Data FAQ (German)](https://www.dwd.de/DE/leistungen/opendata/faqs_opendata.html)
    * [DWD Copyright information](https://www.dwd.de/EN/service/copyright/copyright_artikel.html)


    ## Data Sources

    All data available through Bright Sky is taken or derived from data on the [DWD open data server](https://opendata.dwd.de/):

    * **Current weather / SYNOP**:
      * https://opendata.dwd.de/weather/weather_reports/synoptic/germany/json/
    * **Hourly weather**:
      * Historical: https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/
      * Current day: https://opendata.dwd.de/weather/weather_reports/poi/
      * Forecasts: https://opendata.dwd.de/weather/local_forecasts/mos/
    * **Radar**:
      * https://opendata.dwd.de/weather/radar/composite/rv/
    * **Alerts**:
      * https://opendata.dwd.de/weather/alerts/cap/COMMUNEUNION_DWD_STAT/


  contact:
    email: jakob@brightsky.dev
    name: Jakob de Maeyer
    url: "https://brightsky.dev/"
  license:
    name: MIT
    url: "https://raw.githubusercontent.com/jdemaeyer/brightsky/master/LICENSE"
servers:
  - url: "https://api.brightsky.dev/"
paths:
  /current_weather:
    get:
      summary: Current weather
      description: |
        Returns current weather for a given location.

        To set the location for which to retrieve weather, you must supply both `lat` and `lon` _or_ one of `dwd_station_id`, `wmo_station_id`, or `source_id`.

        This endpoint is different from the other weather endpoints in that it does not directly correspond to any of the data available from the DWD Open Data server. Instead, it is a best-effort solution to reflect current weather conditions by compiling [SYNOP observations](/operations/getSynop) from the past one and a half hours.
      operationId: getCurrentWeather
      parameters:
        - $ref: "#/components/parameters/lat"
        - $ref: "#/components/parameters/lon"
        - $ref: "#/components/parameters/dwd_station_id"
        - $ref: "#/components/parameters/wmo_station_id"
        - $ref: "#/components/parameters/source_id"
        - $ref: "#/components/parameters/max_dist"
        - $ref: "#/components/parameters/tz"
        - $ref: "#/components/parameters/units"
      responses:
        "200":
          description: Current weather and meta information on its sources.
          content:
            application/json:
              schema:
                type: object
                properties:
                  weather:
                    allOf:
                      - $ref: "#/components/schemas/CurrentWeatherRecord"
                      - type: object
                        properties:
                          fallback_source_ids:
                            description: Object mapping meteorological parameters to the source IDs of alternative sources that were used to fill up missing values in the main source
                            type: object
                            example: {"pressure_msl": 11831, "solar": 11831}
                  sources:
                    type: array
                    items:
                      $ref: "#/components/schemas/Source"
                example: {"weather":{"source_id":238685,"timestamp":"2023-08-07T12:30:00+00:00","cloud_cover":100,"condition":"dry","dew_point":10.14,"solar_10":0.081,"solar_30":0.207,"solar_60":0.48,"precipitation_10":0.0,"precipitation_30":0.0,"precipitation_60":0.0,"pressure_msl":1013.6,"relative_humidity":62,"visibility":43128,"wind_direction_10":280,"wind_direction_30":287,"wind_direction_60":285,"wind_speed_10":27.4,"wind_speed_30":26.6,"wind_speed_60":29.2,"wind_gust_direction_10":270,"wind_gust_direction_30":270,"wind_gust_direction_60":270,"wind_gust_speed_10":37.8,"wind_gust_speed_30":37.8,"wind_gust_speed_60":54.4,"sunshine_30":2.0,"sunshine_60":22.0,"temperature":17.6,"fallback_source_ids":{},"icon":"cloudy"},"sources":[{"id":238685,"dwd_station_id":"01766","observation_type":"synop","lat":52.1344,"lon":7.69686,"height":47.8,"station_name":"Muenster/Osnabrueck","wmo_station_id":"10315","first_record":"2023-08-06T06:30:00+00:00","last_record":"2023-08-07T12:30:00+00:00","distance":16364.0}]}
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "404":
          $ref: "#/components/responses/NoSources"
  /weather:
    get:
      summary: Hourly weather (including forecasts)
      description: |
        Returns a list of hourly weather records (and/or forecasts) for the time range given by `date` and `last_date`.

        To set the location for which to retrieve records (and/or forecasts), you must supply both `lat` and `lon` _or_ one of `dwd_station_id`, `wmo_station_id`, or `source_id`.
      operationId: getWeather
      parameters:
        - $ref: "#/components/parameters/date"
        - $ref: "#/components/parameters/last_date"
        - $ref: "#/components/parameters/lat"
        - $ref: "#/components/parameters/lon"
        - $ref: "#/components/parameters/dwd_station_id"
        - $ref: "#/components/parameters/wmo_station_id"
        - $ref: "#/components/parameters/source_id"
        - $ref: "#/components/parameters/max_dist"
        - $ref: "#/components/parameters/tz"
        - $ref: "#/components/parameters/units"
      responses:
        "200":
          description: Hourly weather records/forecasts and meta information on their sources.
          content:
            application/json:
              schema:
                type: object
                properties:
                  weather:
                    type: array
                    items:
                      $ref: "#/components/schemas/WeatherRecord"
                  sources:
                    type: array
                    items:
                      $ref: "#/components/schemas/Source"
                example: {"weather":[{"timestamp":"2023-08-07T14:00:00+02:00","source_id":6134,"precipitation":0.0,"pressure_msl":1013.3,"sunshine":34.0,"temperature":17.6,"wind_direction":280,"wind_speed":33.8,"cloud_cover":63,"dew_point":9.8,"relative_humidity":60,"visibility":50800,"wind_gust_direction":null,"wind_gust_speed":47.2,"condition":"dry","precipitation_probability":null,"precipitation_probability_6h":null,"solar":0.563,"icon":"partly-cloudy-day"}],"sources":[{"id":6134,"dwd_station_id":"01766","observation_type":"current","lat":52.13,"lon":7.7,"height":48.0,"station_name":"MUENSTER/OSNABR.","wmo_station_id":"10315","first_record":"2023-08-05T14:00:00+00:00","last_record":"2023-08-07T13:00:00+00:00","distance":16008.0}]}
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "404":
          $ref: "#/components/responses/NoSources"
  /radar:
    get:
      summary: Radar
      description: |
        Returns radar rainfall data with 1 km spatial and 5 minute temporal resolution, including a forecast for the next two hours.

        Radar data is recorded on a 1200 km (North-South) x 1100 km (East-West) grid, with each pixel representing 1 kmÂ². **That's quite a lot of data, so use `lat`/`lon` or `bbox` whenever you can (see below).** Past radar records are kept for six hours.

        Bright Sky can return the data in a few formats. Use the default `compressed` format if possible â€“ this'll get you the fastest response times by far and reduce load on the server. If you have a small-ish bounding box (e.g. 250 x 250 pixels), using the `plain` format should be fine.

        ### Quickstart

        This request will get you radar data near MÃ¼nster, reaching 200 km to the East/West/North/South, as a two-dimensional grid of integers:

        [`https://api.brightsky.dev/radar?lat=52&lon=7.6&format=plain`](https://api.brightsky.dev/radar?lat=52&lon=7.6&format=plain)

        ### Content

        * The grid is a polar stereographic projection of Germany and the regions bordering it. This is different from the mercator projection used for most consumer-facing maps like OpenStreetMap or Google Maps, and overlaying the radar data onto such a map without conversion (reprojection) will be inaccurate! Check out our [radar demo](https://brightsky.dev/demo/radar/) for an example of correctly reprojecting the radar data using OpenLayers. Alternatively, take a look at the `dwd:RV-Produkt` layer on the [DWD's open GeoServer](https://maps.dwd.de/geoserver/web/wicket/bookmarkable/org.geoserver.web.demo.MapPreviewPage) for ready-made tiles you can overlay onto a map.
        * The [proj-string](https://proj.org/en/9.2/usage/quickstart.html) for the grid projection is `+proj=stere +lat_0=90 +lat_ts=60 +lon_0=10 +a=6378137 +b=6356752.3142451802 +no_defs +x_0=543196.83521776402 +y_0=3622588.8619310018`. The radar pixels range from `-500` (left) to `1099500` (right) on the x-axis, and from `500` (top) to `-1199500` (bottom) on the y-axis, each radar pixel a size of `1000x1000` (1 kmÂ²).
        * The DWD data does not cover the whole grid! Many areas near the edges will always be `0`.
        * Values represent 0.01 mm / 5 min. I.e., if a pixel has a value of `45`, then 0.45 mm of precipitation fell in the corresponding square kilometer in the past five minutes.
        * The four corners of the grid are as follows:
          * Northwest: Latitude `55.86208711`, Longitude `1.463301510`
          * Northeast: Latitude `55.84543856`, Longitude `18.73161645`
          * Southeast: Latitude `45.68460578`, Longitude `16.58086935`
          * Southwest: Latitude `45.69642538`, Longitude `3.566994635`

        You can find details and more information in the [DWD's `RV product info` (German only)](https://www.dwd.de/DE/leistungen/radarprodukte/formatbeschreibung_rv.pdf?__blob=publicationFile&v=3). Below is an example visualization of the rainfall radar data taken from this document, using the correct projection and showing the radar coverage:

        ![image](https://github.com/jdemaeyer/brightsky/assets/10531844/09f9bb5f-088a-417e-8a0c-ea5a20fe0969)

        ### Code examples

        > The radar data is quite big (naively unpacking the default 25-frames response into Python integer arrays will eat roughly 125 MB of memory), so use `bbox` whenever you can.

        #### `compressed` format

        With Javascript using [`pako`](https://github.com/nodeca/pako):

        ```js
        fetch(
          'https://api.brightsky.dev/radar'
        ).then((resp) => resp.json()
        ).then((respData) => {
          const raw = respData.radar[0].precipitation_5;
          const compressed = Uint8Array.from(atob(raw), c => c.charCodeAt(0));
          const rawBytes = pako.inflate(compressed).buffer;
          const precipitation = new Uint16Array(rawBytes);
        });
        ```

        With Python using `numpy`:

        ```python
        import base64
        import zlib

        import numpy as np
        import requests

        resp = requests.get('https://api.brightsky.dev/radar')
        raw = resp.json()['radar'][0]['precipitation_5']
        raw_bytes = zlib.decompress(base64.b64decode(raw))

        data = np.frombuffer(
            raw_bytes,
            dtype='i2',
        ).reshape(
            # Adjust `1200` and `1100` to the height/width of your bbox
            (1200, 1100),
        )
        ```

        With Python using the standard library's `array`:
        ```python
        import array

        # [... load raw_bytes as above ...]

        data = array.array('H')
        data.frombytes(raw_bytes)
        data = [
            # Adjust `1200` and `1100` to the height/width of your bbox
            data[row*1100:(row+1)*1100]
            for row in range(1200)
        ]
        ```

        Simple plot using `matplotlib`:
        ```python
        import matplotlib.pyplot as plt

        # [... load data as above ...]

        plt.imshow(data, vmax=50)
        plt.show()
        ```

        #### `bytes` format

        Same as for `compressed`, but add `?format=bytes` to the URL and remove the call to `zlib.decompress`, using just `raw_bytes = base64.b64decode(raw)` instead.

        #### `plain` format

        This is obviously a lot simpler than the `compressed` format. It is, however, also a lot slower. Nonetheless, if you have a small-ish `bbox` the performance difference becomes manageable, so just using the `plain` format and not having to deal with unpacking logic can be a good option in this case.

        With Python:
        ```python
        import requests

        resp = requests.get('https://api.brightsky.dev/radar?format=plain')
        data = resp.json()['radar'][0]['precipitation_5']
        ```

        ### Additional resources

        * [Source for our radar demo, including reprojecton via OpenLayers](https://github.com/jdemaeyer/brightsky/blob/master/docs/demo/radar/index.html)
        * [Raw data on the Open Data Server](https://opendata.dwd.de/weather/radar/composite/rv/)
        * [Details on the `RV` product (German)](https://www.dwd.de/DE/leistungen/radarprodukte/formatbeschreibung_rv.pdf?__blob=publicationFile&v=3)
        * [Visualization of current rainfall radar](https://www.dwd.de/DE/leistungen/radarbild_film/radarbild_film.html)
        * [General info on DWD radar products (German)](https://www.dwd.de/DE/leistungen/radarprodukte/radarprodukte.html)
        * [Radar status (German)](https://www.dwd.de/DE/leistungen/radarniederschlag/rn_info/home_freie_radarstatus_kartendaten.html?nn=16102)
        * [DWD notifications for radar products (German)](https://www.dwd.de/DE/leistungen/radolan/radolan_info/radolan_informationen.html?nn=16102)
      operationId: getRadar
      parameters:
        - name: date
          in: query
          description: Timestamp of first record to retrieve, in ISO 8601 format. May contain time and/or UTC offset. (_Defaults to 1 hour before latest measurement._)
          examples:
            date:
              value: "2023-08-07"
            timestamp:
              value: "2023-08-07T19:00+02:00"
          schema:
            type: string
            format: date-time
        - name: last_date
          in: query
          description: Timestamp of last record to retrieve, in ISO 8601 format.  May contain time and/or UTC offset. (_Defaults to 2 hours after `date`._)
          examples:
            date:
              value: "2023-08-08"
            timestamp:
              value: "2023-08-07T23:00+02:00"
          schema:
            type: string
            format: date-time
        - name: bbox
          in: query
          description: Bounding box (top, left, bottom, right) **in pixels**, edges are inclusive. (_Defaults to full 1200x1100 grid._)
          example: 100,100,300,300
          schema:
            type: array
            items:
              type: integer
        - name: lat
          in: query
          description: Alternative way to set a bounding box, where `lat` / `lon` will lay inside (but not necessarily in the center of) the returned radar data. Data will reach `distance` meters to each side of this location, but is possibly cut off at the edges of the radar grid.
          examples:
            Berlin:
              value: 52.52
            GÃ¶ttingen:
              value: 51.55
          schema:
            type: number
        - name: lon
          in: query
          description: Alternative way to set a bounding box, must be used together with `lat` and `distance`, see description for `lat`.
          examples:
            Berlin:
              value: 13.4
            GÃ¶ttingen:
              value: 9.9
          schema:
            type: number
        - name: distance
          in: query
          description: Alternative way to set a bounding box, must be used together with `lat` and `lon`, see description for `lat`.
          example: 100000
          schema:
            type: integer
        - name: tz
          in: query
          description: Timezone in which timestamps will be presented, as <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">tz database name</a>.
          examples:
            Berlin:
              value: "Europe/Berlin"
            Darwin:
              value: "Australia/Darwin"
            UTC:
              value: "Etc/UTC"
          schema:
            type: string
            default: "Etc/UTC"
        - name: format
          in: query
          description: |
            Determines how the precipitation data is encoded into the `precipitation_5` field:
            * `compressed`: base64-encoded, zlib-compressed bytestring of 2-byte integers
            * `bytes`: base64-encoded bytestring of 2-byte integers
            * `plain`: Nested array of integers
          schema:
            type: string
            enum: ["compressed", "bytes", "plain"]
            default: "compressed"
      responses:
        "200":
          description: List of radar records for the given bounding box.
          content:
            application/json:
              schema:
                type: object
                properties:
                  radar:
                    type: array
                    items:
                      $ref: "#/components/schemas/Radar"
                  geometry:
                    type: object
                    description: GeoJSON-formatted bounding box of returned radar data, i.e. lat/lon coordinates of the four corners.
                    example: {"type":"Polygon","coordinates":[[7.44365,52.08712],[7.45668,51.90644],[7.7487,51.914],[7.73716,52.09473]]}
                  bbox:
                    type: array
                    items:
                      type: integer
                    description: Bounding box (top, left, bottom, right) calculated from the supplied position and distance. Only returned if you supplied `lat` and `lon`.
                    nullable: true
                    example: [100,100,300,300]
                  latlon_position:
                    type: object
                    description: Exact x-y-position of the supplied position. Only returned if you supplied `lat` and `lon`.
                    nullable: true
                    example: {"x":10.244,"y":10.088}
                example: {"radar":[{"timestamp":"2023-08-08T11:45:00+00:00","source":"RADOLAN::RV::2023-08-08T11:45:00+00:00","precipitation_5":"eF5jGAWjYBTQEQAAA3IAAQ=="}],"geometry":{"type":"Polygon","coordinates":[[7.44365,52.08712],[7.45668,51.90644],[7.7487,51.914],[7.73716,52.09473]]},"latlon_position":{"x":10.244,"y":10.088}}
        "400":
          $ref: "#/components/responses/InvalidRadarRequest"
        "404":
          $ref: "#/components/responses/NotCovered"
  /alerts:
    get:
      summary: Alerts
      description: |
        Returns a list of weather alerts for the given location, or all weather alerts if no location given.

        If you supply either `warn_cell_id` or both `lat` and `lon`, Bright Sky will return additional information on that cell in the `location` field. Warn cell IDs are municipality (_Gemeinde_) cell IDs.

        ### Notes

        * The DWD divides Germany's area into roughly 11,000 "cells" based on municipalities (_Gemeinden_), and issues warnings for each of these cells. Most warnings apply to many cells.
        * Bright Sky will supply information on the cell that a given lat/lon belongs to in the `location` field.
        * There is also a set of roughly 400 cells based on districts (_Landkreise_) that is not supported by Bright Sky.
        * The complete list of cells can be found on the DWD GeoServer (see below).

        ### Additional resources

        * [Live demo of a simple interactive alerts map](https://brightsky.dev/demo/alerts/)
        * [Source for alerts map demo](https://github.com/jdemaeyer/brightsky/blob/master/docs/demo/alerts/index.html)
        * [Map view of all current alerts by the DWD](https://www.dwd.de/DE/wetter/warnungen_gemeinden/warnWetter_node.html)
        * [List of municipality cells](https://maps.dwd.de/geoserver/wfs?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=Warngebiete_Gemeinden&OUTPUTFORMAT=json)
        * [List of district cells (*not used by Bright Sky!*)](https://maps.dwd.de/geoserver/wfs?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=Warngebiete_Kreise&OUTPUTFORMAT=json)
        * [Raw data on the Open Data Server](https://opendata.dwd.de/weather/alerts/cap/COMMUNEUNION_DWD_STAT/)
        * [DWD Documentation on alert fields and their allowed contents (English)](https://www.dwd.de/DE/leistungen/opendata/help/warnungen/cap_dwd_profile_en_pdf_2_1_13.pdf?__blob=publicationFile&v=3)
        * [DWD Documentation on alert fields and their allowed contents (German)](https://www.dwd.de/DE/leistungen/opendata/help/warnungen/cap_dwd_profile_de_pdf_2_1_13.pdf?__blob=publicationFile&v=3)
      operationId: getAlerts
      parameters:
        - $ref: "#/components/parameters/lat"
        - $ref: "#/components/parameters/lon"
        - name: warn_cell_id
          in: query
          description: Municipality warn cell ID.
          examples:
            GÃ¶ttingen:
              value: 803159016
            MÃ¼nster:
              value: 705515101
          schema:
            type: integer
        - name: tz
          in: query
          description: Timezone in which timestamps will be presented, as <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">tz database name</a>.
          examples:
            Berlin:
              value: "Europe/Berlin"
            Darwin:
              value: "Australia/Darwin"
            UTC:
              value: "Etc/UTC"
          schema:
            type: string
            default: "Etc/UTC"
      responses:
        "200":
          description: List of weather alerts for the given location.
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Alert"
                  location:
                    $ref: "#/components/schemas/Location"
                example: {"alerts":[{"id":279977,"alert_id":"2.49.0.0.276.0.DWD.PVW.1691344680000.2cf9fad6-dc83-44ba-9e88-f2827439da59","status":"actual","effective":"2023-08-06T17:58:00+00:00","onset":"2023-08-07T08:00:00+00:00","expires":"2023-08-07T19:00:00+00:00","category":"met","response_type":"prepare","urgency":"immediate","severity":"minor","certainty":"likely","event_code":51,"event_en":"wind gusts","event_de":"WINDBÃ–EN","headline_en":"Official WARNING of WIND GUSTS","headline_de":"Amtliche WARNUNG vor WINDBÃ–EN","description_en":"There is a risk of wind gusts (level 1 of 4).\nMax. gusts: 50-60 km/h; Wind direction: west; Increased gusts: near showers and in exposed locations < 70 km/h","description_de":"Es treten WindbÃ¶en mit Geschwindigkeiten zwischen 50 km/h (14 m/s, 28 kn, Bft 7) und 60 km/h (17 m/s, 33 kn, Bft 7) aus westlicher Richtung auf. In SchauernÃ¤he sowie in exponierten Lagen muss mit SturmbÃ¶en bis 70 km/h (20 m/s, 38 kn, Bft 8) gerechnet werden.","instruction_en":null,"instruction_de":null}],"location":{"warn_cell_id":705515101,"name":"MÃ¼nster-Nord","name_short":"MÃ¼nster-Nord","district":"MÃ¼nster","state":"Nordrhein-Westfalen","state_short":"NW"}}
        "400":
          $ref: "#/components/responses/InvalidAlertRequest"
        "404":
          $ref: "#/components/responses/NotCovered"
  /sources:
    get:
      summary: Weather sources (stations)
      tags:
        - Internals
      description: |
        Returns a list of all Bright Sky sources matching the given location criteria, ordered by distance.

        You must supply both `lat` and `lon` _or_ one of `dwd_station_id`, `wmo_station_id`, or `source_id`.
      operationId: getSources
      parameters:
        - $ref: "#/components/parameters/lat"
        - $ref: "#/components/parameters/lon"
        - $ref: "#/components/parameters/dwd_station_id"
        - $ref: "#/components/parameters/wmo_station_id"
        - $ref: "#/components/parameters/source_id"
        - $ref: "#/components/parameters/max_dist"
      responses:
        "200":
          description: Hourly weather records/forecasts and meta information on their sources.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sources:
                    type: array
                    items:
                      $ref: "#/components/schemas/Source"
                example: {"sources":[{"id":2814,"dwd_station_id":null,"observation_type":"forecast","lat":51.97,"lon":7.63,"height":60.0,"station_name":"MUENSTER ZENTRUM","wmo_station_id":"P0036","first_record":"2023-08-07T12:00:00+00:00","last_record":"2023-08-17T16:00:00+00:00","distance":3922.0},{"id":291353,"dwd_station_id":"00110","observation_type":"historical","lat":52.0483,"lon":7.4881,"height":65.0,"station_name":"Altenberge","wmo_station_id":null,"first_record":"2011-11-01T06:00:00+00:00","last_record":"2017-05-23T06:00:00+00:00","distance":9363.0}]}
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "404":
          $ref: "#/components/responses/NoSources"
  /synop:
    get:
      summary: Raw SYNOP observations
      tags:
        - Internals
      description: |
        Returns a list of ten-minutely SYNOP observations for the time range given by `date` and `last_date`. Note that Bright Sky only stores SYNOP observations from the past 30 hours.

        To set the weather station for which to retrieve records, you must supply one of `dwd_station_id`, `wmo_station_id`, or `source_id`. The `/synop` endpoint does not support `lat` and `lon`; use the [`/sources` endpoint](/operations/getSources) if you need to retrieve a SYNOP station ID close to a given location.

        SYNOP observations are stored as they were reported, which in particular implies that many parameters are only available at certain timestamps. For example, most stations report `sunshine_60` only on the full hour, and `sunshine_30` only at 30 minutes past the full hour (i.e. also not on the full hour). Check out the [`/current_weather` endpoint](/operations/getCurrentWeather) for an opinionated compilation of recent SYNOP records into a single "current weather" record.
      operationId: getSynop
      parameters:
        - $ref: "#/components/parameters/date"
        - $ref: "#/components/parameters/last_date"
        - $ref: "#/components/parameters/dwd_station_id"
        - $ref: "#/components/parameters/wmo_station_id"
        - $ref: "#/components/parameters/source_id"
        - $ref: "#/components/parameters/tz"
        - $ref: "#/components/parameters/units"
      responses:
        "200":
          description: Ten-minutely SYNOP records and meta information on the source.
          content:
            application/json:
              schema:
                type: object
                properties:
                  weather:
                    type: array
                    items:
                      $ref: "#/components/schemas/SynopRecord"
                  sources:
                    type: array
                    items:
                      $ref: "#/components/schemas/Source"
                example: {"weather":[{"timestamp":"2023-08-07T14:00:00+02:00","source_id":238685,"cloud_cover":75,"dew_point":9.85,"precipitation_10":0.0,"precipitation_30":null,"precipitation_60":0.0,"pressure_msl":1013.6,"relative_humidity":62,"sunshine_10":null,"sunshine_30":null,"sunshine_60":34.0,"temperature":17.3,"visibility":50777,"wind_direction_10":290,"wind_direction_30":null,"wind_direction_60":null,"wind_speed_10":30.2,"wind_speed_30":null,"wind_speed_60":null,"wind_gust_direction_10":270,"wind_gust_direction_30":270,"wind_gust_direction_60":null,"wind_gust_speed_10":54.4,"wind_gust_speed_30":46.8,"wind_gust_speed_60":46.8,"condition":"dry","solar_10":0.063,"solar_30":null,"solar_60":null,"icon":"partly-cloudy-day"}],"sources":[{"id":11695,"dwd_station_id":"01766","observation_type":"synop","lat":52.1344,"lon":7.69685,"height":47.8,"station_name":"Muenster/Osnabrueck","wmo_station_id":"10315","first_record":"2022-11-15T02:30:00+00:00","last_record":"2022-11-15T03:00:00+00:00"}]}
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "404":
          $ref: "#/components/responses/NoSources"
components:
  schemas:
    Alert:
      type: object
      properties:
        id:
          description: Bright Sky-internal ID for this alert
          type: integer
          example: 279977
        alert_id:
          description: Unique CAP message identifier
          type: string
          example: "2.49.0.0.276.0.DWD.PVW.1691344680000.2cf9fad6-dc83-44ba-9e88-f2827439da59"
        status:
          description: Alert status
          type: string
          enum: ["actual", "test"]
          example: "actual"
        effective:
          description: Alert issue time
          type: string
          format: date-time
          example: "2023-08-06T17:58:00+00:00"
        onset:
          description: Expected event begin time
          type: string
          format: date-time
          example: "2023-08-07T08:00:00+00:00"
        expires:
          description: Expected event end time
          type: string
          format: date-time
          example: "2023-08-07T19:00:00+00:00"
          nullable: true
        category:
          description: Alert category, meteorological message (`met`) or public health related message (`health`)
          type: string
          enum: ["met", "health", null]
          nullable: true
        response_type:
          description: Code denoting type of action recommended for target audience
          type: string
          enum: ["prepare", "allclear", "none", "monitor", null]
          nullable: true
        urgency:
          description: Alert time frame
          type: string
          enum: ["immediate", "future", null]
          nullable: true
        severity:
          description: Alert severity
          type: string
          enum: ["minor", "moderate", "severe", "extreme", null]
          nullable: true
        certainty:
          description: Alert certainty
          type: string
          enum: ["observed", "likely", null]
          nullable: true
        event_code:
          description: DWD event code
          type: integer
          example: 51
          nullable: true
        event_en:
          description: Label for DWD event code (English)
          type: string
          example: "wind gusts"
          nullable: true
        event_de:
          description: Label for DWD event code (German)
          type: string
          example: "WINDBÃ–EN"
          nullable: true
        headline_en:
          description: Alert headline (English)
          type: string
          example: "Official WARNING of WIND GUSTS"
        headline_de:
          description: Alert headline (German)
          type: string
          example: "Amtliche WARNUNG vor WINDBÃ–EN"
        description_en:
          description: Alert description (English)
          type: string
          example: "There is a risk of heavy rain (Level 2 of 4).\nPrecipitation amounts: 20-35 l/mÂ²/6h"
        description_de:
          description: Alert headline (German)
          type: string
          example: "Es tritt Starkregen auf. Dabei werden Niederschlagsmengen zwischen 20 l/mÂ² und 35 l/mÂ² in 6 Stunden erwartet."
        instruction_en:
          description: Additional instructions and safety advice (English)
          type: string
          example: "NOTE: Be aware of the following possible dangers: The downpours can cause temporary traffic disruption."
          nullable: true
        instruction_de:
          description: Additional instructions and safety advice (German)
          type: string
          example: "ACHTUNG! Hinweis auf mÃ¶gliche Gefahren: WÃ¤hrend des Platzregens sind kurzzeitig Verkehrsbehinderungen mÃ¶glich."
          nullable: true
    CurrentWeatherRecord:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: ISO 8601-formatted timestamp of this weather record
          example: 2023-08-07T12:30:00+00:00
        source_id:
          description: Bright Sky source ID for this record
          type: integer
          example: 238685
        cloud_cover:
          description: Total cloud cover at timestamp
          type: number
          nullable: true
          example: 12.1
        condition:
          description: |
            Current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types.
          type: string
          nullable: true
          enum: ["dry", "fog", "rain", "sleet", "snow", "hail", "thunderstorm", null]
        dew_point:
          description: Dew point at timestamp, 2 m above ground
          type: number
          nullable: true
          example: 10.14
        icon:
          description: |
            Icon alias suitable for the current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types.
          type: string
          nullable: true
          enum: ["clear-day", "clear-night", "partly-cloudy-day", "partly-cloudy-night", "cloudy", "fog", "wind", "rain", "sleet", "snow", "hail", "thunderstorm", null]
        precipitation_10:
          description: Total precipitation during previous 10 minutes
          type: number
          nullable: true
          example: 0.8
        precipitation_30:
          description: Total precipitation during previous 30 minutes
          type: number
          nullable: true
          example: 1.2
        precipitation_60:
          description: Total precipitation during previous 60 minutes
          type: number
          nullable: true
          example: 1.8
        pressure_msl:
          description: Atmospheric pressure at timestamp, reduced to mean sea level
          type: number
          nullable: true
          example: 1015.1
        relative_humidity:
          description: Relative humidity at timestamp
          type: integer
          nullable: true
          example: 40
        solar_10:
          description: Solar irradiation during previous 10 minutes
          type: number
          nullable: true
          example: 0.081
        solar_30:
          description: Solar irradiation during previous 30 minutes
          type: number
          nullable: true
          example: 0.207
        solar_60:
          description: Solar irradiation during previous 60 minutes
          type: number
          nullable: true
          example: 0.48
        sunshine_30:
          description: Sunshine duration during previous 30 minutes
          type: number
          nullable: true
          example: 1080
        sunshine_60:
          description: Sunshine duration during previous 60 minutes
          type: number
          nullable: true
          example: 2100
        temperature:
          description: Air temperature at timestamp, 2 m above the ground
          type: number
          nullable: true
          example: 17.6
        visibility:
          description: Visibility at timestamp
          type: integer
          nullable: true
          example: 50000
        wind_direction_10:
          description: Mean wind direction during previous 10 minutes, 10 m above the ground
          type: integer
          nullable: true
          example: 70
        wind_direction_30:
          description: Mean wind direction during previous 30 minutes, 10 m above the ground
          type: integer
          nullable: true
          example: 70
        wind_direction_60:
          description: Mean wind direction during previous 60 minutes, 10 m above the ground
          type: integer
          nullable: true
          example: 70
        wind_speed_10:
          description: Mean wind speed during previous previous 10 minutes, 10 m above the ground
          type: number
          nullable: true
          example: 12.6
        wind_speed_30:
          description: Mean wind speed during previous previous 30 minutes, 10 m above the ground
          type: number
          nullable: true
          example: 12.6
        wind_speed_60:
          description: Mean wind speed during previous previous 60 minutes, 10 m above the ground
          type: number
          nullable: true
          example: 12.6
        wind_gust_direction_10:
          description: Direction of maximum wind gust during previous 10 minutes, 10 m above the ground
          type: integer
          nullable: true
          example: 50
        wind_gust_direction_30:
          description: Direction of maximum wind gust during previous 30 minutes, 10 m above the ground
          type: integer
          nullable: true
          example: 50
        wind_gust_direction_60:
          description: Direction of maximum wind gust during previous 60 minutes, 10 m above the ground
          type: integer
          nullable: true
          example: 50
        wind_gust_speed_10:
          description: Speed of maximum wind gust during previous 10 minutes, 10 m above the ground
          type: number
          nullable: true
          example: 33.5
        wind_gust_speed_30:
          description: Speed of maximum wind gust during previous 30 minutes, 10 m above the ground
          type: number
          nullable: true
          example: 33.5
        wind_gust_speed_60:
          description: Speed of maximum wind gust during previous 60 minutes, 10 m above the ground
          type: number
          nullable: true
          example: 33.5
    Location:
      type: object
      properties:
        warn_cell_id:
          description: Municipality warn cell ID of given location
          type: integer
          example: 803159016
        name:
          description: Municipality name
          type: string
          example: "Stadt GÃ¶ttingen"
        name_short:
          description: Shortened municipality name
          type: string
          example: "GÃ¶ttingen"
        district:
          description: District name
          type: string
          example: "GÃ¶ttingen"
        state:
          description: Federal state name
          type: string
          example: "Niedersachsen"
        state_short:
          description: Shortened federal state name
          type: string
          example: "NI"
    Radar:
      type: object
      properties:
        timestamp:
          description: ISO 8601-formatted timestamp of this radar record
          type: string
          format: date-time
          example: "2023-08-07T08:00:00+00:00"
        source:
          description: Unique identifier for DWD radar product source of this radar record
          type: string
          example: "RADOLAN::RV::2023-08-08T11:45:00+00:00"
        precipitation_5:
          description: Pixelwise 5-minute precipitation data, in units of 0.01 mm / 5 min. Depending on the `format` parameter, this field contains either a two-dimensional array of integers (`plain`), or a base64 string (`bytes` or `compressed`).
          type: string
          example: "eF5jGAWjYBTQEQAAA3IAAQ=="
    Source:
      type: object
      properties:
        id:
          description: Bright Sky source ID
          type: integer
          example: 6007
        dwd_station_id:
          description: DWD weather station ID
          type: string
          nullable: true
          example: "01766"
        wmo_station_id:
          description: WMO weather station ID
          type: string
          nullable: true
          example: "10315"
        station_name:
          description: DWD weather station name
          type: string
          nullable: true
          example: "MÃ¼nster/OsnabrÃ¼ck"
        observation_type:
          description: Source type
          type: string
          enum: ["forecast", "synop", "current", "historical"]
        first_record:
          type: string
          format: date-time
          description: Timestamp of first available record for this source
          example: 2010-01-01T00:00+02:00
        last_record:
          type: string
          format: date-time
          description: Timestamp of latest available record for this source
          example: 2023-08-07T12:40+02:00
        lat:
          description: Station latitude, in decimal degrees
          type: number
          example: 52.1344
        lon:
          description:   Station longitude, in decimal degrees
          type: number
          example: 7.6969
        height:
          description: Station height, in meters
          type: number
          example: 47.8
        distance:
          description: Distance of weather station to the requested `lat` and `lon`, in meters
          type: number
          example: 16365
    SynopRecord:
      allOf:
        - $ref: "#/components/schemas/CurrentWeatherRecord"
        - type: object
          properties:
            sunshine_10:
              description: Sunshine duration during previous 10 minutes
              type: number
              nullable: true
              example: 240
    WeatherRecord:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: ISO 8601-formatted timestamp of this weather record
          example: 2023-08-07T08:00+02:00
        source_id:
          description: Main Bright Sky source ID for this record
          type: integer
          example: 6007
        cloud_cover:
          description: Total cloud cover at timestamp
          type: number
          nullable: true
          example: 12.1
        condition:
          description: |
            Current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types.
          type: string
          nullable: true
          enum: ["dry", "fog", "rain", "sleet", "snow", "hail", "thunderstorm", null]
        dew_point:
          description: Dew point at timestamp, 2 m above ground
          type: number
          nullable: true
          example: -2.5
        icon:
          description: |
            Icon alias suitable for the current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types.
          type: string
          nullable: true
          enum: ["clear-day", "clear-night", "partly-cloudy-day", "partly-cloudy-night", "cloudy", "fog", "wind", "rain", "sleet", "snow", "hail", "thunderstorm", null]
        precipitation:
          description: Total precipitation during previous 60 minutes
          type: number
          nullable: true
          example: 1.8
        precipitation_probability:
          description: Probability of more than 0.1 mm of precipitation in the previous hour (only available in forecasts)
          type: integer
          nullable: true
          example: 46
        precipitation_probability_6h:
          description: Probability of more than 0.2 mm of precipitation in the previous 6 hours (only available in forecasts at 0:00, 6:00, 12:00, and 18:00 UTC)
          type: integer
          nullable: true
          example: 75
        pressure_msl:
          description: Atmospheric pressure at timestamp, reduced to mean sea level
          type: number
          nullable: true
          example: 1015.1
        relative_humidity:
          description: Relative humidity at timestamp
          type: number
          nullable: true
          example: 40
        solar:
          description: Solar irradiation during previous 60 minutes
          type: number
          nullable: true
          example: 0.563
        sunshine:
          description: Sunshine duration during previous 60 minutes
          type: number
          nullable: true
          example: 2100
        temperature:
          description: Air temperature at timestamp, 2 m above the ground
          type: number
          nullable: true
          example: 10.6
        visibility:
          description: Visibility at timestamp
          type: number
          nullable: true
          example: 50000
        wind_direction:
          description: Mean wind direction during previous hour, 10 m above the ground
          type: number
          nullable: true
          example: 70
        wind_speed:
          description: Mean wind speed during previous hour, 10 m above the ground
          type: number
          nullable: true
          example: 12.6
        wind_gust_direction:
          description: Direction of maximum wind gust during previous hour, 10 m above the ground
          type: number
          nullable: true
          example: 50
        wind_gust_speed:
          description: Speed of maximum wind gust during previous hour, 10 m above the ground
          type: number
          nullable: true
          example: 33.5
        fallback_source_ids:
          description: Object mapping meteorological parameters to the source IDs of alternative sources that were used to fill up missing values in the main source
          type: object
          example: {"pressure_msl": 11831, "wind_speed_30": 11831}
  parameters:
    date:
      name: date
      in: query
      description: Timestamp of first weather record (or forecast) to retrieve, in ISO 8601 format. May contain time and/or UTC offset.
      required: true
      examples:
        date:
          value: "2023-08-07"
        timestamp:
          value: "2023-08-07T08:00+02:00"
      schema:
        type: string
        format: date-time
    dwd_station_id:
      name: dwd_station_id
      in: query
      description: DWD station ID, typically five alphanumeric characters. You can supply multiple station IDs separated by commas, ordered from highest to lowest priority.
      examples:
        single:
          value: "01766"
        multiple:
          value: "00420,00053,00400"
      schema:
        type: array
        items:
          type: string
      explode: false
    last_date:
      name: last_date
      in: query
      description: Timestamp of last weather record (or forecast) to retrieve, in ISO 8601 format. Will default to `date + 1 day`.
      examples:
        date:
          value: "2023-08-08"
        timestamp:
          value: "2023-08-07T23:00+02:00"
      schema:
        type: string
        format: date-time
    lat:
      name: lat
      in: query
      description: Latitude in decimal degrees.
      examples:
        Berlin:
          value: 52.52
        GÃ¶ttingen:
          value: 51.55
      schema:
        type: number
    lon:
      name: lon
      in: query
      description: Longitude in decimal degrees.
      examples:
        Berlin:
          value: 13.4
        GÃ¶ttingen:
          value: 9.9
      schema:
        type: number
    max_dist:
      name: max_dist
      in: query
      description: Maximum distance of record location from the location given by `lat` and `lon`, in meters. Only has an effect when using `lat` and `lon`.
      example: 10000
      schema:
        type: integer
        default: 50000
    source_id:
      name: source_id
      in: query
      description: Bright Sky source ID, as retrieved from the [`/sources` endpoint](/operations/getSources). You can supply multiple source IDs separated by commas, ordered from highest to lowest priority.
      schema:
        type: array
        items:
          type: integer
      examples:
        single:
          value: 1234
        multiple:
          value: 1234,2345
      explode: false
    tz:
      name: tz
      in: query
      description: Timezone in which record timestamps will be presented, as <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">tz database name</a>. Will also be used as timezone when parsing `date` and `last_date`, unless these have explicit UTC offsets. If omitted but `date` has an explicit UTC offset, that offset will be used as timezone. Otherwise will default to UTC.
      examples:
        Berlin:
          value: "Europe/Berlin"
        Darwin:
          value: "Australia/Darwin"
        UTC:
          value: "Etc/UTC"
      schema:
        type: string
    units:
      name: units
      in: query
      description: |
        Physical units in which meteorological parameters will be returned. Set to `si` to use <a href="https://en.wikipedia.org/wiki/International_System_of_Units">SI units</a> (except for precipitation, which is always measured in millimeters). The default `dwd` option uses a set of units that is more common in meteorological applications and civil use:
        <table>
          <tr><td></td><td>DWD</td><td>SI</td></tr>
          <tr><td>Cloud cover</td><td>%</td><td>%</td></tr>
          <tr><td>Dew point</td><td>Â°C</td><td>K</td></tr>
          <tr><td>Precipitation</td><td>mm</td><td><s>kg / mÂ²</s> <strong>mm</strong></td></tr>
          <tr><td>Precipitation probability</td><td>%</td><td>%</td></tr>
          <tr><td>Pressure</td><td>hPa</td><td>Pa</td></tr>
          <tr><td>Relative humidity</td><td>%</td><td>%</td></tr>
          <tr><td>Solar irradiation</td><td>kWh / mÂ²</td><td>J / mÂ²</td></tr>
          <tr><td>Sunshine</td><td>min</td><td>s</td></tr>
          <tr><td>Temperature</td><td>Â°C</td><td>K</td></tr>
          <tr><td>Visibility</td><td>m</td><td>m</td></tr>
          <tr><td>Wind (gust) direction</td><td>Â°</td><td>Â°</td></tr>
          <tr><td>Wind (gust) speed</td><td>km / h</td><td>m / s</td></tr>
        </table>
      schema:
        type: string
        enum: ["dwd", "si"]
        default: "dwd"
    wmo_station_id:
      name: wmo_station_id
      in: query
      description: WMO station ID, typically five alphanumeric characters. You can supply multiple station IDs separated by commas, ordered from highest to lowest priority.
      examples:
        single:
          value: "10315"
        multiple:
          value: "G005,F451,10389"
      schema:
        type: array
        items:
          type: string
      explode: false
  responses:
    InvalidAlertRequest:
      description: Request has missing or invalid parameters.
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
            example:
              title: 400 Bad Request
              description: Please supply lat/lon or warn_cell_id
    InvalidRadarRequest:
      description: Request has missing or invalid parameters.
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
            example:
              title: 400 Bad Request
              description: Please supply either both lat and lon, or none
    InvalidRequest:
      description: Request has missing or invalid parameters.
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
            example:
              title: 400 Bad Request
              description: Please supply lat/lon or dwd_station_id or wmo_station_id or source_id
    NoSources:
      description: No weather sources match the given location criteria.
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
            example:
              title: 404 Not Found
              description: No sources match your criteria
    NotCovered:
      description: Given location is not covered by the DWD.
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
            example:
              title: 404 Not Found
              description: Requested position is not covered by the DWD
